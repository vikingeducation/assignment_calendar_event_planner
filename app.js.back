const express = require('express');
const app = express();

const Model = require('sequelize').Model;

// Templates
const expressHandlebars = require('express-handlebars');
const hbs = expressHandlebars.create({
	partialsDir: 'views/',
	defaultLayout: 'application'
});
app.engine('handlebars', hbs.engine);
app.set('view engine', 'handlebars');

// Post Data
const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: true }));

// Log Request Info
const morgan = require('morgan');
const morganToolkit = require('morgan-toolkit')(morgan);
app.use(morganToolkit());

// Method Overriding
const methodOverride = require('method-override');
const getPostSupport = require('express-method-override-get-post-support');
app.use(methodOverride(getPostSupport.callback, getPostSupport.options));

app.get('/', (req, res) => {
	res.redirect('/users');
});

// Redirect Sugar
express.response.doRedirect = function(location) {
	let _this = this;

	if (typeof location === 'object') {
		let path;
		if (location instanceof Model) {
			// Get the model name in plural format and lowercase it.
			path =
				'/' +
				location._modelOptions.name.plural.toLowerCase() +
				'/' +
				location.get('id');
		} else {
			path = '/';
		}
		//_this.redirect(path);
	} else if (typeof location === 'string') {
		return function() {
			console.log(_this);
			_this.redirect(location);
		};
	}
};

// Routes
const usersRoutes = require('./routers/users');
app.use('/users', usersRoutes);

const calendarRoutes = require('./routers/calendars');
app.use('/calendars', calendarRoutes);

// Set up port/host
const port = process.env.PORT || process.argv[2] || 3000;
const host = 'localhost';
let args = process.env.NODE_ENV === 'production' ? [port] : [port, host];

// helpful log when the server starts
args.push(() => {
	console.log(`Listening: http://${host}:${port}`);
});

// Use apply to pass the args to listen
app.listen.apply(app, args);
